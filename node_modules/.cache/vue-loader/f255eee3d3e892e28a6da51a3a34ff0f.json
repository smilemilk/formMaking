{"remainingRequest":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanliguo/Documents/workstudy/vue-form-making/src/components/WidgetForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/src/components/WidgetForm.vue","mtime":1557765656499},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Draggable from 'vuedraggable'\nimport WidgetFormItem from './WidgetFormItem'\n\nexport default {\n  components: {\n    Draggable,\n    WidgetFormItem\n  },\n  props: ['data', 'select'],\n  data () {\n    return {\n      selectWidget: this.select\n    }\n  },\n    created(){\n        console.log(this.data)\n    },\n  mounted () {\n    document.body.ondrop = function (event) {\n      let isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1\n      if (isFirefox) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n    }\n  },\n  methods: {\n    handleMoveEnd ({newIndex, oldIndex}) {\n      console.log('index', newIndex, oldIndex)\n    },\n    handleSelectWidget (index) {\n      console.log(index, '#####')\n      this.selectWidget = this.data.list[index]\n    },\n    handleWidgetAdd (evt) {\n      console.log('add', evt)\n      console.log('end', evt)\n      const newIndex = evt.newIndex\n      const to = evt.to\n      console.log(to)\n\n      //为拖拽到容器的元素添加唯一 key\n      const key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999)\n      this.$set(this.data.list, newIndex, {\n        ...this.data.list[newIndex],\n        options: {\n          ...this.data.list[newIndex].options,\n          remoteFunc: 'func_' + key\n        },\n        key,\n        // 绑定键值\n        model: this.data.list[newIndex].type + '_' + key,\n        rules: []\n      })\n\n      if (this.data.list[newIndex].type === 'radio' || this.data.list[newIndex].type === 'checkbox' || this.data.list[newIndex].type === 'select') {\n        this.$set(this.data.list, newIndex, {\n          ...this.data.list[newIndex],\n          options: {\n            ...this.data.list[newIndex].options,\n            options: this.data.list[newIndex].options.options.map(item => ({\n              ...item\n            }))\n          }\n        })\n      }\n\n      if (this.data.list[newIndex].type === 'grid') {\n        this.$set(this.data.list, newIndex, {\n          ...this.data.list[newIndex],\n          columns: this.data.list[newIndex].columns.map(item => ({...item}))\n        })\n      }\n\n      this.selectWidget = this.data.list[newIndex]\n    },\n    handleWidgetColAdd ($event, row, colIndex) {\n      console.log('coladd', $event, row, colIndex)\n      const newIndex = $event.newIndex\n      const oldIndex = $event.oldIndex\n      const item = $event.item\n\n      // 防止布局元素的嵌套拖拽\n      if (item.className.indexOf('data-grid') >= 0) {\n\n        // 如果是列表中拖拽的元素需要还原到原来位置\n        item.tagName === 'DIV' && this.data.list.splice(oldIndex, 0, row.columns[colIndex].list[newIndex])\n\n        row.columns[colIndex].list.splice(newIndex, 1)\n\n        return false\n      }\n\n      console.log('from', item)\n\n      const key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999)\n\n      this.$set(row.columns[colIndex].list, newIndex, {\n        ...row.columns[colIndex].list[newIndex],\n        options: {\n          ...row.columns[colIndex].list[newIndex].options,\n          remoteFunc: 'func_' + key\n        },\n        key,\n        // 绑定键值\n        model: row.columns[colIndex].list[newIndex].type + '_' + key,\n        rules: []\n      })\n\n      if (row.columns[colIndex].list[newIndex].type === 'radio' || row.columns[colIndex].list[newIndex].type === 'checkbox' || this.data.list[newIndex].type === 'select') {\n        this.$set(row.columns[colIndex].list, newIndex, {\n          ...row.columns[colIndex].list[newIndex],\n          options: {\n            ...row.columns[colIndex].list[newIndex].options,\n            options: row.columns[colIndex].list[newIndex].options.options.map(item => ({\n              ...item\n            }))\n          }\n        })\n      }\n\n      this.selectWidget = row.columns[colIndex].list[newIndex]\n    },\n    handleWidgetDelete (index) {\n      if (this.data.list.length - 1 === index) {\n        if (index === 0) {\n          this.selectWidget = {}\n        } else {\n          this.selectWidget = this.data.list[index - 1]\n        }\n      } else {\n        this.selectWidget = this.data.list[index + 1]\n      }\n\n      this.$nextTick(() => {\n        this.data.list.splice(index, 1)\n      })\n    },\n  },\n  watch: {\n    select (val) {\n      this.selectWidget = val\n    },\n    selectWidget: {\n      handler (val) {\n        this.$emit('update:select', val)\n      },\n      deep: true\n    }\n  }\n}\n",{"version":3,"sources":["WidgetForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"WidgetForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"widget-form-container\">\n    <el-form :size=\"data.config.size\" :label-position=\"data.config.labelPosition\" :label-width=\"data.config.labelWidth + 'px'\">\n\n      <draggable class=\"widget-form-list\"\n        v-model=\"data.list\"\n        v-bind=\"{group:'people', ghostClass: 'ghost'}\"\n        @end=\"handleMoveEnd\"\n        @add=\"handleWidgetAdd\"\n      >\n\n        <template v-for=\"(element, index) in data.list\">\n          {{data.list}}\n\n          <template v-if=\"element.type == 'grid'\">\n            <div v-if=\"element && element.key\"  class=\"widget-grid-container data-grid\" :key=\"element.key\" style=\"position: relative;\">\n              <el-row class=\"widget-grid \"\n                type=\"flex\"\n                :class=\"{active: selectWidget.key == element.key}\"\n                :gutter=\"element.options.gutter ? element.options.gutter : 0\"\n                :justify=\"element.options.justify\"\n                :align=\"element.options.align\"\n                @click.native=\"handleSelectWidget(index)\">\n                <el-col  v-for=\"(col, colIndex) in element.columns\" :key=\"colIndex\" :span=\"col.span ? col.span : 0\">\n                  <div style=\"border: 1px dashed #999;\">\n                    <draggable\n                      class=\"widget-form-list\"\n                      style=\"padding-bottom: 50px;\"\n                      v-model=\"col.list\"\n                      filter=\"widget-grid-container\"\n                      v-bind=\"{group:'people', ghostClass: 'ghost'}\"\n                      @end=\"handleMoveEnd\"\n                      @add=\"handleWidgetColAdd($event, element, colIndex)\"\n                    >\n                      <widget-form-item\n                        v-for=\"(el, i) in col.list\"\n                        :key=\"el.key\"\n                        v-if=\"el.key\"\n                        :element=\"el\"\n                        :select.sync=\"selectWidget\"\n                        :index=\"i\"\n                        :data=\"col\"></widget-form-item>\n                    </draggable>\n                  </div>\n                </el-col>\n\n              </el-row>\n              <el-button title=\"删除\" style=\"bottom: -20px;\" @click.stop=\"handleWidgetDelete(index)\" class=\"widget-action-delete\" v-if=\"selectWidget.key == element.key\" circle plain type=\"danger\">\n                <!-- <icon name=\"icon-trash\" style=\"width: 12px;height: 12px;\"></icon> -->\n                <i class=\"iconfont icon-trash\" ></i>\n              </el-button>\n            </div>\n          </template>\n          <template v-else>\n            <widget-form-item v-if=\"element && element.key\"  :key=\"element.key\" :element=\"element\" :select.sync=\"selectWidget\" :index=\"index\" :data=\"data\"></widget-form-item>\n          </template>\n        </template>\n\n      </draggable>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport Draggable from 'vuedraggable'\nimport WidgetFormItem from './WidgetFormItem'\n\nexport default {\n  components: {\n    Draggable,\n    WidgetFormItem\n  },\n  props: ['data', 'select'],\n  data () {\n    return {\n      selectWidget: this.select\n    }\n  },\n    created(){\n        console.log(this.data)\n    },\n  mounted () {\n    document.body.ondrop = function (event) {\n      let isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1\n      if (isFirefox) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n    }\n  },\n  methods: {\n    handleMoveEnd ({newIndex, oldIndex}) {\n      console.log('index', newIndex, oldIndex)\n    },\n    handleSelectWidget (index) {\n      console.log(index, '#####')\n      this.selectWidget = this.data.list[index]\n    },\n    handleWidgetAdd (evt) {\n      console.log('add', evt)\n      console.log('end', evt)\n      const newIndex = evt.newIndex\n      const to = evt.to\n      console.log(to)\n\n      //为拖拽到容器的元素添加唯一 key\n      const key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999)\n      this.$set(this.data.list, newIndex, {\n        ...this.data.list[newIndex],\n        options: {\n          ...this.data.list[newIndex].options,\n          remoteFunc: 'func_' + key\n        },\n        key,\n        // 绑定键值\n        model: this.data.list[newIndex].type + '_' + key,\n        rules: []\n      })\n\n      if (this.data.list[newIndex].type === 'radio' || this.data.list[newIndex].type === 'checkbox' || this.data.list[newIndex].type === 'select') {\n        this.$set(this.data.list, newIndex, {\n          ...this.data.list[newIndex],\n          options: {\n            ...this.data.list[newIndex].options,\n            options: this.data.list[newIndex].options.options.map(item => ({\n              ...item\n            }))\n          }\n        })\n      }\n\n      if (this.data.list[newIndex].type === 'grid') {\n        this.$set(this.data.list, newIndex, {\n          ...this.data.list[newIndex],\n          columns: this.data.list[newIndex].columns.map(item => ({...item}))\n        })\n      }\n\n      this.selectWidget = this.data.list[newIndex]\n    },\n    handleWidgetColAdd ($event, row, colIndex) {\n      console.log('coladd', $event, row, colIndex)\n      const newIndex = $event.newIndex\n      const oldIndex = $event.oldIndex\n      const item = $event.item\n\n      // 防止布局元素的嵌套拖拽\n      if (item.className.indexOf('data-grid') >= 0) {\n\n        // 如果是列表中拖拽的元素需要还原到原来位置\n        item.tagName === 'DIV' && this.data.list.splice(oldIndex, 0, row.columns[colIndex].list[newIndex])\n\n        row.columns[colIndex].list.splice(newIndex, 1)\n\n        return false\n      }\n\n      console.log('from', item)\n\n      const key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999)\n\n      this.$set(row.columns[colIndex].list, newIndex, {\n        ...row.columns[colIndex].list[newIndex],\n        options: {\n          ...row.columns[colIndex].list[newIndex].options,\n          remoteFunc: 'func_' + key\n        },\n        key,\n        // 绑定键值\n        model: row.columns[colIndex].list[newIndex].type + '_' + key,\n        rules: []\n      })\n\n      if (row.columns[colIndex].list[newIndex].type === 'radio' || row.columns[colIndex].list[newIndex].type === 'checkbox' || this.data.list[newIndex].type === 'select') {\n        this.$set(row.columns[colIndex].list, newIndex, {\n          ...row.columns[colIndex].list[newIndex],\n          options: {\n            ...row.columns[colIndex].list[newIndex].options,\n            options: row.columns[colIndex].list[newIndex].options.options.map(item => ({\n              ...item\n            }))\n          }\n        })\n      }\n\n      this.selectWidget = row.columns[colIndex].list[newIndex]\n    },\n    handleWidgetDelete (index) {\n      if (this.data.list.length - 1 === index) {\n        if (index === 0) {\n          this.selectWidget = {}\n        } else {\n          this.selectWidget = this.data.list[index - 1]\n        }\n      } else {\n        this.selectWidget = this.data.list[index + 1]\n      }\n\n      this.$nextTick(() => {\n        this.data.list.splice(index, 1)\n      })\n    },\n  },\n  watch: {\n    select (val) {\n      this.selectWidget = val\n    },\n    selectWidget: {\n      handler (val) {\n        this.$emit('update:select', val)\n      },\n      deep: true\n    }\n  }\n}\n</script>\n"]}]}