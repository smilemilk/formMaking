{"remainingRequest":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanliguo/Documents/workstudy/vue-form-making/src/components/GenerateForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/src/components/GenerateForm.vue","mtime":1553766967000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shanliguo/Documents/workstudy/vue-form-making/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport GenetateFormItem from './GenerateFormItem'\nimport {loadJs} from '../util/index.js'\n\nexport default {\n  name: 'fm-generate-form',\n  components: {\n    GenetateFormItem\n  },\n  props: ['data', 'remote', 'value', 'insite'],\n  data () {\n    return {\n      models: {},\n      rules: {}\n    }\n  },\n  created () {\n    this.generateModle(this.data.list)\n  },\n  mounted () {\n  },\n  methods: {\n    generateModle (genList) {\n      for (let i = 0; i < genList.length; i++) {\n        if (genList[i].type === 'grid') {\n          genList[i].columns.forEach(item => {\n            this.generateModle(item.list)\n          })\n        } else {\n          if (this.value && Object.keys(this.value).indexOf(genList[i].model) >= 0) {\n            this.models[genList[i].model] = this.value[genList[i].model]\n          } else {\n            if (genList[i].type === 'blank') {\n              this.models[genList[i].model] = genList[i].options.defaultType === 'String' ? '' : (genList[i].options.defaultType === 'Object' ? {} : [])\n            } else {\n              this.models[genList[i].model] = genList[i].options.defaultValue\n            }      \n          }\n          \n          if (this.rules[genList[i].model]) {\n            \n            this.rules[genList[i].model] = [...this.rules[genList[i].model], ...genList[i].rules.map(item => {\n              if (item.pattern) {\n                return {...item, pattern: eval(item.pattern)}\n              } else {\n                return {...item}\n              }\n            })]\n          } else {\n            \n            this.rules[genList[i].model] = [...genList[i].rules.map(item => {\n              if (item.pattern) {\n                return {...item, pattern: eval(item.pattern)}\n              } else {\n                return {...item}\n              }\n            })]\n          }      \n        }\n      }\n    },\n    getData () {\n      return new Promise((resolve, reject) => {\n        this.$refs.generateForm.validate(valid => {\n          if (valid) {\n            resolve(this.models)\n          } else {\n            reject(new Error('表单数据校验失败').message)\n          }\n        })\n      })\n    },\n    refresh () {\n      \n    }\n  },\n  watch: {\n    data: {\n      deep: true,\n      handler (val) {\n        this.generateModle(val.list)\n      }\n    },\n    value: {\n      deep: true,\n      handler (val) {\n        console.log(JSON.stringify(val))\n        this.models = {...this.models, ...val}\n      }\n    }\n  }\n}\n",{"version":3,"sources":["GenerateForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GenerateForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-form ref=\"generateForm\" \n      :size=\"data.config.size\"\n      :model=\"models\" :rules=\"rules\" :label-position=\"data.config.labelPosition\" :label-width=\"data.config.labelWidth + 'px'\">\n      <template v-for=\"item in data.list\">\n\n        <template v-if=\"item.type == 'grid'\">\n          <el-row\n            :key=\"item.key\"\n            type=\"flex\"\n            :gutter=\"item.options.gutter ? item.options.gutter : 0\"\n            :justify=\"item.options.justify\"\n            :align=\"item.options.align\"\n          >\n            <el-col v-for=\"(col, colIndex) in item.columns\" :key=\"colIndex\" :span=\"col.span\">\n              \n\n              <template v-for=\"citem in col.list\" >\n                <el-form-item v-if=\"citem.type=='blank'\" :label=\"citem.name\" :prop=\"citem.model\" :key=\"citem.key\">\n                  <slot :name=\"citem.model\" :model=\"models\"></slot>\n                </el-form-item>\n                <genetate-form-item v-else :key=\"citem.key\" :models.sync=\"models\" :remote=\"remote\" :rules=\"rules\" :widget=\"citem\"></genetate-form-item>\n              </template>\n            </el-col>\n          </el-row>\n        </template>\n\n        <template v-else-if=\"item.type == 'blank'\">\n          <el-form-item :label=\"item.name\" :prop=\"item.model\" :key=\"item.key\">\n            <slot :name=\"item.model\" :model=\"models\"></slot>\n          </el-form-item>\n        </template>\n\n        <template v-else>\n          <genetate-form-item :key=\"item.key\" :models.sync=\"models\" :rules=\"rules\" :widget=\"item\" :remote=\"remote\"></genetate-form-item>\n        </template>\n        \n      </template>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport GenetateFormItem from './GenerateFormItem'\nimport {loadJs} from '../util/index.js'\n\nexport default {\n  name: 'fm-generate-form',\n  components: {\n    GenetateFormItem\n  },\n  props: ['data', 'remote', 'value', 'insite'],\n  data () {\n    return {\n      models: {},\n      rules: {}\n    }\n  },\n  created () {\n    this.generateModle(this.data.list)\n  },\n  mounted () {\n  },\n  methods: {\n    generateModle (genList) {\n      for (let i = 0; i < genList.length; i++) {\n        if (genList[i].type === 'grid') {\n          genList[i].columns.forEach(item => {\n            this.generateModle(item.list)\n          })\n        } else {\n          if (this.value && Object.keys(this.value).indexOf(genList[i].model) >= 0) {\n            this.models[genList[i].model] = this.value[genList[i].model]\n          } else {\n            if (genList[i].type === 'blank') {\n              this.models[genList[i].model] = genList[i].options.defaultType === 'String' ? '' : (genList[i].options.defaultType === 'Object' ? {} : [])\n            } else {\n              this.models[genList[i].model] = genList[i].options.defaultValue\n            }      \n          }\n          \n          if (this.rules[genList[i].model]) {\n            \n            this.rules[genList[i].model] = [...this.rules[genList[i].model], ...genList[i].rules.map(item => {\n              if (item.pattern) {\n                return {...item, pattern: eval(item.pattern)}\n              } else {\n                return {...item}\n              }\n            })]\n          } else {\n            \n            this.rules[genList[i].model] = [...genList[i].rules.map(item => {\n              if (item.pattern) {\n                return {...item, pattern: eval(item.pattern)}\n              } else {\n                return {...item}\n              }\n            })]\n          }      \n        }\n      }\n    },\n    getData () {\n      return new Promise((resolve, reject) => {\n        this.$refs.generateForm.validate(valid => {\n          if (valid) {\n            resolve(this.models)\n          } else {\n            reject(new Error('表单数据校验失败').message)\n          }\n        })\n      })\n    },\n    refresh () {\n      \n    }\n  },\n  watch: {\n    data: {\n      deep: true,\n      handler (val) {\n        this.generateModle(val.list)\n      }\n    },\n    value: {\n      deep: true,\n      handler (val) {\n        console.log(JSON.stringify(val))\n        this.models = {...this.models, ...val}\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n// @import '../styles/cover.scss';\n</style>\n"]}]}